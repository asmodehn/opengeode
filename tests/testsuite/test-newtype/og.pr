system og;
    /* CIF TEXT (228, 136), (380, 140) */
    -- demonstrating how to create custom types with the newtype
    -- sdl construct
    
    use dv comment 'dataview-uniq.asn';
    
    signal dd;
    signal we;
    /* CIF ENDTEXT */
    channel c
        from env to og with dd;
        from og to env with we;
    endchannel;
    block og;
        signalroute r
            from env to og with dd;
            from og to env with we;
        connect c and r;
        /* CIF PROCESS (226, 46), (150, 75) */
        process og;
            /* CIF TEXT (402, 101), (379, 398) */
            syntype toto = myInteger
              constants 5:some_constant,  60,=100, >100, <250 -- [5, 249]
            endsyntype;
            
            syntype Foo = MyInteger
             constants >2,  <10 -- result [3, 9]
            endsyntype;
            
            syntype Bar_Tabac = MyInteger
             constants 5:10, <256 -- [5, 255]
            endsyntype;
            
            syntype fool = foo
               constants 4:8
            endsyntype;
            
            dcl titi bar_tabac  := 5;
            
            -- subtyping of native types:
            syntype subinteger = integer
             constants -5:255
            endsyntype;
            
            syntype subunsigned = natural
             constants 0:255
            endsyntype;
            /* CIF ENDTEXT */
            /* CIF TEXT (122, 80), (249, 338) */
            newtype myArray
               array (myinteger, myinteger)
            endnewtype;
            
            newtype My_Underscore
               array (Seq_b, MyInteger)
            endnewtype;
            
            -- Not supported:
            --newtype mystruct
            --struct
            -- a myarray;
            --endnewtype;
            
            dcl x MyArray := { 1,2,3 };
            dcl y My_Underscore;
            
            dcl someInt MyInteger := 0;
            synonym forty_two MyInteger = '42'H;
            synonym zero MyInteger = 0;
            
            dcl myseq Seq;
            /* CIF ENDTEXT */
            /* CIF TEXT (234, 599), (201, 140) */
            dcl something subinteger := 8;
            dcl sth subunsigned := 5;
            
            /* CIF ENDTEXT */
            /* CIF START (975, 216), (70, 35) */
            START;
                /* CIF task (931, 271), (156, 35) */
                task myseq.a := some_seq.a;
                /* CIF task (953, 326), (113, 35) */
                task someint := zero;
                /* CIF task (921, 376), (177, 35) */
                task someint := some_constant;
                /* CIF decision (974, 431), (70, 50) */
                decision someint;
                    /* CIF ANSWER (786, 501), (112, 23) */
                    (some_constant):
                    /* CIF ANSWER (904, 501), (81, 23) */
                    (forty_two):
                    /* CIF ANSWER (1027, 501), (70, 23) */
                    (zero):
                    /* CIF ANSWER (1117, 501), (70, 53) */
                    (1:41,
43:65,
67:255):
                enddecision;
                /* CIF NEXTSTATE (975, 570), (70, 35) */
                NEXTSTATE wait;
            /* CIF state (792, 231), (70, 35) */
            state wait;
                /* CIF input (792, 286), (70, 35) */
                input dd;
                    /* CIF NEXTSTATE (792, 341), (70, 35) */
                    NEXTSTATE wait;
            endstate;
        endprocess og;
    endblock;
endsystem;